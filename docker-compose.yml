version: '3.8'

services:
  # MongoDB (for local development only - use Atlas in production)
  mongodb:
    image: mongo:6-jammy
    container_name: flexisub-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: flexisub
      MONGO_INITDB_ROOT_PASSWORD: flexisub_dev_2024
      MONGO_INITDB_DATABASE: flexisub
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - flexisub-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: flexisub-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://flexisub:flexisub_dev_2024@mongodb:27017/flexisub?authSource=admin
      JWT_SECRET: your_super_secret_jwt_key_here_min_32_chars
      JWT_EXPIRE: 7d
      BCRYPT_ROUNDS: 12
      FRONTEND_URL: http://localhost:3000
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - flexisub-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Development)
  frontend-dev:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: flexisub-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_ENV: development
      CHOKIDAR_USEPOLLING: true
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - flexisub-network

  # Frontend (Production)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: flexisub-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - flexisub-network
    profiles:
      - production

  # Redis (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: flexisub-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flexisub-network
    command: redis-server --appendonly yes --requirepass flexisub_redis_2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service (Mock for now)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: flexisub-ml
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      FLASK_ENV: development
      MODEL_PATH: /app/models
    volumes:
      - ./ml-service:/app
    networks:
      - flexisub-network
    profiles:
      - ml

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  flexisub-network:
    driver: bridge